scriptencoding utf-8
set encoding=utf-8

" --- set eof and eol onpeak standard
set fileformats=dos

" --- set shell
set shell=/bin/bash

" --- enable filetype plugins
filetype plugin on

" --- turn off eof new line
set binary
set noeol

" --- set to auto read when a file is changed outside of vim
set autoread

" --- set leader to ','
let mapleader = ","

" --- enable copying from vim to clipboard on linux
"set clipboard=unnamedplus

" --- enable copying from macvim to clipboard on osx
set clipboard=unnamed

" --- quick escape
inoremap jj <Esc>

" --- fast saving
nmap <leader>w :w!<cr>

" --- delete file and remove from buffer
nmap <leader>rm :call delete(expand('%')) \| bdelete!<cr>

" --- reload vimrc settings and clear ctrl-p cache
nmap <leader>r :source ~/.vimrc<cr>:ClearAllCtrlPCaches<cr>

" --- not completely VI compatible
set nocompatible

" --- configure backspace
set backspace=indent,eol,start

" --- right and left wrap lines
set whichwrap+=<,>,h,l,[,]

" --- uses indent of previous line for new line
set autoindent

" --- python indentation
set modeline

" --- number of lines of history will be remembered
set history=500

" --- display current cursor position in lower right corner
set ruler

" --- display incomplete commands to the left of the ruler
set showcmd

" --- search settings 
set incsearch " matches while typing
set ignorecase " case insenstive searching
set smartcase " if a search has an uppercase letter it is case senstive
set hlsearch " highlight search

" --- turn on syntax highlighting
syntax on

" --- height of command bar
set cmdheight=2

" --- enable regular expressions
set magic

set report=5 " set largest size of changes reported on status line

" --- buffer is hidden when abandoned
set hid

" --- bash style tab completion for filenames
set wildmenu
set wildmode=list:longest

" --- minimum of 5 lines between cursor and top/bottom of screen
set scrolloff=5

" --- turn off backup and swap files
set nobackup
set nowb
set noswapfile

" --- decrease message size
set shortmess=atI

" --- grep within vim uses ack
set grepprg=ack

" --- find within vim uses ack
let g:findprg = "ack --sort-files -g"

" --- show line numbers
set number

" --- ignore whitespace in vimdiff
set diffopt+=iwhite

" --- highlight current line
set cursorline

" --- enable mouse to move cursor
set mouse=a

" --- show status line and command line
set ls=2

" --- save original pwd
let g:trainororiginalpwd=getcwd()

" --- set session directory
let g:session_dir = "~/.vim/sessions/"

" --- use undo file
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

" --- gundo.vim settings
nnoremap <Leader>u :GundoToggle<CR>
if has('python3')
	let g:gundo_prefer_python3 = 1
endif

" --- remappings
map K :<BS>
map <Leader>k <C-W>k
map <Leader>j <C-W>j
map <Leader>h <C-W>h
map <Leader>l <C-W>l
map <Leader>n :new<CR>
map <Leader>v :vnew<CR>
map <Leader>< :cold<CR>
map <Leader>> :cnew<CR>

" --- close buffer
map <Leader>x :bd<CR>

" --- first letter to uppercase/lowercase
nmap <leader>U mQgewvU`Q
nmap <leader>L  mQgewvu`Q

" --- diff mappings
" map <Leader>g :diffget
" map <Leader>G :diffget<CR>
" map <Leader>p :diffput
" map <Leader>P :diffput<CR>
" map <Leader>u :diffupdate<CR>

" --- explorer mode setting
" set current working directory for window then open netrw
nmap <leader>e :lcd %:p:h<CR>:Lexplore<CR>:vertical res 30<CR>:lcd <C-r>=g:trainororiginalpwd<CR><CR>
let g:netrw_liststyle=0

" --- vim-vinegar settings
autocmd FileType netrw setl bufhidden=wipe

" javascript console log macro
nnoremap <leader>cj oconsole.log();<esc>hi
nnoremap <leader>dj odebugger;<esc>

" --- clear highlights
nnoremap <leader><space> :noh<cr>

" --- insert a line without entering insert mode
nnoremap <C-J> o<Esc>
nnoremap <C-K> O<Esc>

" --- yank selected text into 'black hole register' and paste
vmap r "_dP

" --- yank into system clipboard
nnoremap <leader>y "+yy
vnoremap <leader>y "+y

let tabstop=4

" markdown options
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufNewFile,BufReadPost *.apib set filetype=markdown

" Coldfusion-specific options
au FileType cf call FileTypeCF()
function! FileTypeCF()
call SyntaxRange#Include('<cfscript', '</cfscript>', 'cfscript')
setlocal noexpandtab ignorecase
endfunction

" Python-specific options
au FileType python setlocal expandtab shiftwidth=4 tabstop=4 

" Haxe-specific options
au BufNewFile,BufRead *.hx set filetype=haxe
au FileType haxe setlocal expandtab shiftwidth=4 tabstop=4

" --- turn matchit.vim on
runtime macros/matchit.vim

" --- fzf settings
set rtp+=/usr/local/opt/fzf
if executable('ag')
	let $FZF_DEFAULT_COMMAND='ag -g ""'
endif
nnoremap <Leader>f :FZF<CR>

" --- ctrlp settings
let g:ctrlp_prompt_mappings = {
	\ 'ToggleType(1)': ['<c-f>', '<c-up>', ';']
	\ }

let g:ctrlp_cmd = "CtrlPBuffer"

" Custom ignores
	" setting ctrlp_user_command disables some options like ctrlp_custom_ignore
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|\.sass-cache|ccss|node_modules)$|\v\.(pyc|orig|bundle\.js)$'

" Caching
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $XDG_CACHE_HOME.'/vim/ctrlp/'
let g:ctrlp_max_depth = 40

" Keymap
let g:ctrlp_prompt_mappings = {
\     'AcceptSelection("v")': ['<C-Enter>']
\  }

" MRU
let g:ctrlp_mruf_relative = 1
let g:ctrlp_mruf_max = 50

" Search Behavior
let g:ctrlp_lazy_update = 350 " ms
let g:ctrlp_working_path_mode = 'ra'

" use ag if available
if executable('ripgrep')
	let g:ctrlp_use_caching = 0
	let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
elseif executable('ag')
	set grepprg=ag\ --nogroup\ --nocolor
	" setting this disables some options like ctrlp_custom_ignore
	let g:ctrlp_user_command = 'ag %s -l -U --nocolor --hidden -g ""'
endif

" --- ctrlp_bdelete.vim
call ctrlp_bdelete#init()

" --- colorscheme
set t_Co=256
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" --- Show whitespace
set list
set listchars=tab:⇨\ ,trail:.,eol:¬,extends:>,precedes:<
" colors based off of solarized dark
hi SpecialKey cterm=NONE ctermfg=236 ctermbg=234
hi NonText cterm=NONE ctermfg=236 ctermbg=234

" --- vim-airline settings
let g:airline_solarized_bg='dark'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#virtualenv#enabled = 1

" --- ack.vim settings
cabbrev ack Ack
nnoremap <Leader>s :lcd <C-r>=g:trainororiginalpwd<CR><CR>:Ack! -i<Space>
vnoremap <Leader>s y:lcd <C-r>=g:trainororiginalpwd<CR><CR>:Ack! -i<Space><C-r>"
let g:ack_autofold_results=1

if executable('ag')
	let g:ackprg = 'ag --vimgrep'
endif

" --- vim-fugitive
nnoremap <Leader>b :Gblame w<CR>

" --- vim-gitgutter settings
let g:gitgutter_realtime = 0

" --- vim-dispatch settings
cabbrev dispatch Dispatch
nnoremap <Leader>d :Dispatch 

" --- vim-expand-region settings
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" --- limelight.vim settings
nnoremap <Leader>ll :Limelight!!0.5<CR>

" --- vimpdb settings
nnoremap <leader>pp oimport pprint; import vimpdb; pp=pprint.pprint; vimpdb.set_trace()<esc>

" --- vim-javascript settings
let javascript_enable_domhtmlcss = 1

" --- javascript-libraries-syntax.vim
let g:used_javascript_libs = 'underscore,jquery,react,requirejs,chai'

" --- vim-jsx settings
let g:jsx_ext_required = 0

" --- vim-flow settings
let g:flow#autoclose = 1

" --- clever-f.vim settings
let g:clever_f_chars_match_any_signs = ';' 

" --- git-gutter settings
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

" --- syntastic settings
let g:syntastic_always_populate_loc_list = 1
nnoremap <Leader>sy :SyntasticCheck<CR>:Errors<CR><C-W>j
nnoremap <Leader>st :SyntasticToggleMode<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_enable_signs = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ["eslint"]
let g:syntastic_python_checkers = ["pylint"]
let g:syntastic_scss_checkers = ["scss_lint"]
let g:syntastic_c#_checkers = ["mcs"]
let g:syntastic_cf_checkers = []

" --- vim-virtualenv settings
cnoreabbrev activate VirtualEnvActivate
cnoreabbrev deactivate VirtualEnvDeactivate

" --- vim-nose settings
cnoreabbrev rt RunTest
cnoreabbrev rt! RunTests!

" --- vim-commentary settings
autocmd FileType dosini setlocal commentstring=#\ %s

" --- vim-closetag settings
let g:closetag_filenames = "*.html, *.jsx, *.xml"
