" --- set shell
set shell=/bin/bash

" --- enable filetype plugins
filetype plugin on
filetype indent on

" --- set to auto read when a file is changed outside of vim
set autoread

" --- set leader to ','
let mapleader = ","

" --- enable copying from vim to clipboard on linux
"set clipboard=unnamedplus

" --- enable copying from macvim to clipboard on osx
set clipboard=unnamed

" --- quick escape
inoremap jj <Esc>

" --- fast saving
nmap <leader>w :w!<cr>

" --- delete file and remove from buffer
nmap <leader>rm :call delete(expand('%')) \| bdelete!<cr>

" --- reload vimrc settings
nmap <leader>r :source ~/.vimrc<cr>

" --- not completely VI compatible
set nocompatible

" --- configure backspace
set backspace=indent,eol,start

" --- right and left wrap lines
set whichwrap+=<,>,h,l,[,]

" --- uses indent of previous line for new line
set autoindent

" --- python indentation
set modeline

" --- number of lines of history will be remembered
set history=500

" --- display current cursor position in lower right corner
set ruler

" --- display incomplete commands to the left of the ruler
set showcmd

" --- search settings 
set incsearch " matches while typing
set ignorecase " case insenstive searching
set smartcase " if a search has an uppercase letter it is case senstive
set hlsearch " highlight search

" --- turn on syntax highlighting
syntax on

" --- height of command bar
set cmdheight=2

" --- enable regular expressions
set magic

" --- tabs
set tabstop=2 " 1 tab = 2 spaces
set shiftwidth=2 
set smartindent 
set smarttab
set report=5 " set largest size of changes reported on status line

" --- buffer is hidden when abandoned
set hid

" --- bash style tab completion for filenames
set wildmenu
set wildmode=list:longest

" --- minimum of 5 lines between cursor and top/bottom of screen
set scrolloff=5

" --- turn off backup and swap files
set nobackup
set nowb
set noswapfile

" --- decrease message size
set shortmess=atI

" --- grep within vim uses ack
set grepprg=ack

" --- find within vim uses ack
let g:findprg = "ack --sort-files -g"

" --- show line numbers
set number

" --- ignore whitespace in vimdiff
set diffopt+=iwhite

" --- highlight current line
set cursorline

" --- enable mouse to move cursor
set mouse=a

" --- show status line and command line
set ls=2

" --- set session directory
let g:session_dir = "~/.vim/sessions/"

" --- use undo file
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

" --- remappings
map K :<BS>
map <Leader>k <C-W>k
map <Leader>j <C-W>j
map <Leader>h <C-W>h
map <Leader>l <C-W>l
map <Leader>n :new<CR>
map <Leader>v :vnew<CR>
map <Leader>< :cold<CR>
map <Leader>> :cnew<CR>

" --- close buffer
map <Leader>x :bd<CR>

" --- word to uppercase/lowercase
"  mQ sets the mark at the current cursor position and `Q sets the cursor to
"  that position
" nmap <leader>u mQviwU`Q
" nmap <leader>l mQviwu`Q

" --- first letter to uppercase/lowercase
nmap <leader>U mQgewvU`Q
nmap <leader>L  mQgewvu`Q

" --- diff mappings
" map <Leader>g :diffget
" map <Leader>G :diffget<CR>
" map <Leader>p :diffput
" map <Leader>P :diffput<CR>
" map <Leader>u :diffupdate<CR>

" --- explorer mode settings
nmap <leader>e :Explore<cr>
let g:netrw_liststyle=3

" javascript console log macro
nnoremap <leader>cj oconsole.log();<esc>hi

" coldfusion dump macro
nnoremap <leader>cd o<cfdump abort="true" var="##"><esc>hhi

" --- clear highlights
nnoremap <leader><space> :noh<cr>

" --- insert a line without entering insert mode
nnoremap <C-J> o<Esc>
nnoremap <C-K> O<Esc>

" --- yank selected text into 'black hole register' and paste
vmap r "_dP

" --- yank into system clipboard
nnoremap <leader>y "+yy
vnoremap <leader>y "+y

" Coldfusion-specific options
au FileType cf call FileTypeCF()
function! FileTypeCF()
call SyntaxRange#Include('<cfscript', '</cfscript>', 'cfscript')
setlocal noexpandtab ignorecase grepprg=ack\ --type=cf\ -i\ $*
endfunction

au FileType javascript setlocal noexpandtab

" Python-specific options
au FileType python setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab

" Haxe-specific options
au BufNewFile,BufRead *.hx set filetype=haxe
au FileType haxe setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab

"smart indent when entering insert mode with i on empty lines
function! IndentWithI()
if len(getline('.')) == 0
	return "\"_ddO"
else
	return "i"
endif
endfunction
nnoremap <expr> i IndentWithI()

" --- turn matchit.vim on
runtime macros/matchit.vim

" --- ctrlp settings
let g:ctrlp_prompt_mappings = {
	\ 'ToggleType(1)':        ['<c-f>', '<c-up>', ';']
	\ }

let g:ctrlp_cmd = "CtrlPBuffer"
" Custom ignores
let g:ctrlp_custom_ignore = {
\     'dir': '\v[\/]\.(git|hg)$',
\     'file': '\v\.(pyc|o|hi)$'
\  }
" Caching
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_cache_dir = $XDG_CACHE_HOME.'/vim/ctrlp/'
let g:ctrlp_max_depth = 10
" Keymap
let g:ctrlp_prompt_mappings = {
\     'AcceptSelection("v")': ['<C-Enter>']
\  }
nnoremap <Leader>o :CtrlP<CR>
" MRU
let g:ctrlp_mruf_relative = 1
let g:ctrlp_mruf_max = 50
" Search Behavior
let g:ctrlp_lazy_update = 500 " ms
let g:ctrlp_working_path_mode = 'ra'

" --- ctrlp matcher settings
"  TODO: figure out why matcher isn't working on osx
" let g:path_to_matcher = "/usr/local/bin/matcher"

" let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files . -co --exclude-standard']

" let g:ctrlp_match_func = { 'match': 'GoodMatch' }

" function! GoodMatch(items, str, limit, mmode, ispath, crfile, regex)

" 	" Create a cache file if not yet exists
" 	let cachefile = ctrlp#utils#cachedir().'/matcher.cache'
" 	if !( filereadable(cachefile) && a:items == readfile(cachefile) )
" 		call writefile(a:items, cachefile)
" 	endif
" 	if !filereadable(cachefile)
" 		return []
" 	endif

" 	" a:mmode is currently ignored. In the future, we should probably do
" 	" something about that. the matcher behaves like "full-line".
" 	let cmd = g:path_to_matcher.' --limit '.a:limit.' --manifest '.cachefile.' '
" 	if !( exists('g:ctrlp_dotfiles') && g:ctrlp_dotfiles )
" 		let cmd = cmd.'--no-dotfiles '
" 	endif
" 	let cmd = cmd.a:str

" 	return split(system(cmd), "n")

" endfunction


" --- colorscheme
set t_Co=256
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" --- vim-airline settings
let g:airline_solarized_bg='dark'
let g:airline_theme='solarized'
let g:airline#extensions#whitespace#enabled = 0

" --- ack.vim settings
cabbrev ack Ack
nnoremap <Leader>s :Ack 
vnoremap <Leader>s y:Ack -i <C-r>"
let g:ack_use_dispatch=1 " requires vim-dispatch

" --- vim-lawrencium settings
cabbrev hg Hg
cabbrev hgblame Hgannotate
nnoremap <Leader>st :Hgstatus<CR>
nnoremap <Leader>rev :Hgrevert<CR>
nnoremap <Leader>log :Hglogthis<CR>

" --- vim-fugitive
nnoremap <F12> :Gblame<CR>

" --- vim-gitgutter settings
let g:gitgutter_realtime = 0

" --- vim-dispatch settings
cabbrev dispatch Dispatch
nnoremap <Leader>d :Dispatch 

" --- vim-expand-region settings
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" --- vim-sneak settings
let g:sneak#s_next = 1

" --- limelight.vim settings
nnoremap <Leader>ll :Limelight!!0.5<CR>

" --- syntastic settings
let g:syntastic_always_populate_loc_list = 1
nnoremap <Leader>sy :SyntasticCheck<CR>:Errors<CR><C-W>j

" --- vimpdb settings
nnoremap <leader>pp oimport pprint; import vimpdb; pp=pprint.pprint; vimpdb.set_trace()<esc>
        
